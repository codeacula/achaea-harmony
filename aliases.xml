<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.000">
    <AliasPackage>
        <AliasGroup isActive="yes" isFolder="yes">
            <name>Harmony</name>
            <script></script>
            <command></command>
            <packageName></packageName>
            <regex></regex>
            <AliasGroup isActive="yes" isFolder="yes">
                <name>Hunting</name>
                <script></script>
                <command></command>
                <packageName></packageName>
                <regex></regex>
                <Alias isActive="yes" isFolder="no">
                    <name>Set theshold</name>
                    <script>if Harmony then
	Harmony.hunting.setThreshold(matches[2])
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^har threshold (\d+)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Toggle autoattack</name>
                    <script>if Harmony then
	Harmony.hunting.toggleAutoAttack()
end</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^har autoattack$</regex>
                </Alias>
            </AliasGroup>
            <AliasGroup isActive="yes" isFolder="yes">
                <name>Mapping</name>
                <script></script>
                <command></command>
                <packageName></packageName>
                <regex></regex>
                <Alias isActive="yes" isFolder="no">
                    <name>toggles exploring</name>
                    <script>Harmony.mapping.toggleExploring()</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^har exp$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>check unexplored rooms in area</name>
                    <script>Harmony.mapping.printUnexploredRooms()</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^har unexplored$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>toggles lock</name>
                    <script>Harmony.mapping.lockRoom(matches[2])</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^harmony locked (.*)$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>explore next room</name>
                    <script>Harmony.mapping.gotoNextRoom()</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^er$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>toggle autoexplor</name>
                    <script>Harmony.mapping.toggleAutoexplore()</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^har autoexp$</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>hides room</name>
                    <script>setRoomArea(matches[2], -1)</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>har hide (\d+)</regex>
                </Alias>
                <Alias isActive="yes" isFolder="no">
                    <name>Mark current room</name>
                    <script>Harmony.mapping.markCurrentRoom(matches[2])</script>
                    <command></command>
                    <packageName></packageName>
                    <regex>^room mark (\w+)$</regex>
                </Alias>
            </AliasGroup>
            <Alias isActive="yes" isFolder="no">
                <name>Reset Harmony</name>
                <script>Harmony = nil

-- Loads the script
local _sep
if string.char(getMudletHomeDir():byte()) == &quot;/&quot; then 
	_sep = &quot;/&quot; 
else
	_sep = &quot;\\&quot; 
end

local scriptFile = getMudletHomeDir() .. _sep .. &quot;harmony&quot; .. _sep ..&quot;harmony.lua&quot;
dofile(scriptFile)</script>
                <command></command>
                <packageName></packageName>
                <regex>^har reset$</regex>
            </Alias>
            <Alias isActive="yes" isFolder="no">
                <name>Show commands</name>
                <script>local commandGroups = {} -- Because I want to sort by category
local commandGroupCache = {} -- Because I want easy lookups

-- Because I don't want to write them in table structure manually
local addCommand = function(group, comm, desc)
	if not commandGroupCache[group] then
		local newGroup = {
			name = group,
			commands = {}
		}

		table.insert(commandGroups, newGroup)
		commandGroupCache[group] = newGroup
	end

	table.insert(commandGroupCache[group].commands, { command = comm, desc = desc })
end

addCommand(&quot;bashing&quot;, &quot;har autoattack&quot;, &quot;Toggles on/off auto attack&quot;)
addCommand(&quot;bashing&quot;, &quot;har threshold &lt;number&gt;&quot;, &quot;If you enter a room with this many mobs or more, won't autoattack&quot;)
addCommand(&quot;mapping&quot;, &quot;har exp&quot;, &quot;Toggles on/off marking rooms as explored when you visit them&quot;)
addCommand(&quot;mapping&quot;, &quot;har autoexp&quot;, &quot;Toggles on/off auto exploration&quot;)
addCommand(&quot;mapping&quot;, &quot;har unexplored&quot;, &quot;Shows all known unexplored rooms, even if they're locked&quot;)
addCommand(&quot;mapping&quot;, &quot;har locked &lt;roomid&gt;&quot;, &quot;Marks the provided room id as locked&quot;)
addCommand(&quot;mapping&quot;, &quot;har hide &lt;roomid&gt;&quot;, &quot;Puts the provided room id in area -1, effectively hiding it&quot;)
addCommand(&quot;mapping&quot;, &quot;har er&quot;, &quot;Looks for the first unvisited, unlocked room by id and tells the mapper to go there&quot;)
addCommand(&quot;mapping&quot;, &quot;room mark &lt;mark&gt;&quot;, &quot;Marks the current room with the mark you provide&quot;)
addCommand(&quot;system&quot;, &quot;har reset&quot;, &quot;Resets and reruns the harmony scripts&quot;)
addCommand(&quot;ui&quot;, &quot;har map&quot;, &quot;Turns the map on/off&quot;)

table.sort(commandGroups, function(t1, t2) return t1.name &lt;= t2.name end)
if Harmony then
	Harmony.say(&quot;Here's the currently available commands&quot;)

	for _, group in ipairs(commandGroups) do
		cecho(string.format(&quot;&lt;HotPink&gt;Category: &lt;ForestGreen&gt;%s\n&quot;, group.name))
		
		table.sort(group.commands, function(t1, t2) return t1.command &lt;= t2.command end)

		for _, command in ipairs(group.commands) do
			cecho(string.format(&quot;&lt;yellow&gt;%s&lt;white&gt; - &lt;pink&gt;%s\n&quot;, command.command, command.desc))
		end
		cecho(&quot;\n&quot;)
	end
end

</script>
                <command></command>
                <packageName></packageName>
                <regex>^har$</regex>
            </Alias>
        </AliasGroup>
    </AliasPackage>
</MudletPackage>
